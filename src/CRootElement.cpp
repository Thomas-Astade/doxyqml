/******************************************************************
 * This code was generated by the Astade CppGenerator.            *
 * The generated code is not per se a derivative work of Astade;  *
 * the original copyright to this code is held by the holder(s)   *
 * of the copyright to the underlying model at the time this code *
 * was generated; this code may be distributed under terms of     *
 * his/her/their choice.                                          */
/** the root of the abstract syntax tree
 *  @file CRootElement.cpp
 ******************************************************************/

//****** implementation prolog ******
//[Package_doxyqml/Package_ast/classes/class_CRootElement/prolog.cpp]
#include <typeinfo>
#include "CObjectDeclaration.h"
//[EOF]
//***********************************

#include "CRootElement.h"	 // own header



//****** Trace Macros ***************
#ifndef NOTIFY_CONSTRUCTOR
#  define NOTIFY_CONSTRUCTOR(a,b,c)
#endif
#ifndef NOTIFY_DESTRUCTOR
#  define NOTIFY_DESTRUCTOR(a,b)
#endif
#ifndef NOTIFY_FUNCTION_CALL
#  define NOTIFY_FUNCTION_CALL(a,b,c,d,e,f)
#endif
#ifndef NOTIFY_RETURN_VALUE
#  define NOTIFY_RETURN_VALUE(a)
#endif
#ifndef RETURN
#  define RETURN(a) return(a)
#endif

#ifndef LOG
#  define LOG(...)
#endif

doxyqml::CRootElement::CRootElement(const std::string& filename) :
	m_Filename(filename),
	m_Classname(filename)
{
	NOTIFY_CONSTRUCTOR(5, "CRootElement", "const std::string& filename")
//[Package_doxyqml/Package_ast/classes/class_CRootElement/operations/constructor/code.cpp]
	//~~ CRootElement(const std::string& filename) [CRootElement] ~~
	size_t pos = m_Classname.find('.');
	if (pos != std::string::npos)
	    m_Classname.erase(pos);
	
	pos = m_Classname.rfind('/');
	if (pos != std::string::npos)
	    m_Classname.erase(0,pos+1);
//[EOF]
}

void doxyqml::CRootElement::print() const
{
	NOTIFY_FUNCTION_CALL(this, 5, "CRootElement", "print", "", "void ")
//[Package_doxyqml/Package_ast/classes/class_CRootElement/operations/operation_print/code.cpp]
	//~~ void print() [CRootElement] ~~
	for (std::vector<CQmlObject*>::const_iterator it = myChilds.begin(); it != myChilds.end(); it++)
	{
	    if (dynamic_cast<CObjectDeclaration*>(*it))
	    {
	        printf("class %s ",m_Classname.c_str());
	        if (!m_BaseClass.empty())
	            printf(": public %s",m_BaseClass.c_str());
	        printf(" {\n");
	    }
	    (*it)->print();
	}
	printf("};\n");
//[EOF]
}

void doxyqml::CRootElement::setBaseClass(const std::string& baseClass)
{
	NOTIFY_FUNCTION_CALL(this, 5, "CRootElement", "setBaseClass", "const std::string& baseClass", "void ")
//[Package_doxyqml/Package_ast/classes/class_CRootElement/operations/operation_setBaseClass/code.cpp]
	//~~ void setBaseClass(const std::string& baseClass) [CRootElement] ~~
	m_BaseClass = baseClass;
//[EOF]
}

