/******************************************************************
 * This code was generated by the Astade CppGenerator.            *
 * The generated code is not per se a derivative work of Astade;  *
 * the original copyright to this code is held by the holder(s)   *
 * of the copyright to the underlying model at the time this code *
 * was generated; this code may be distributed under terms of     *
 * his/her/their choice.                                          */
/** base class for QML objects
 *  @file CQmlObject.cpp
 ******************************************************************/

//****** implementation prolog ******
//[Package_doxyqml/Package_ast/classes/class_CQmlObject/prolog.cpp]
#include <stdio.h>
//[EOF]
//***********************************

#include "CQmlObject.h"	 // own header



//****** Trace Macros ***************
#ifndef NOTIFY_CONSTRUCTOR
#  define NOTIFY_CONSTRUCTOR(a,b,c)
#endif
#ifndef NOTIFY_DESTRUCTOR
#  define NOTIFY_DESTRUCTOR(a,b)
#endif
#ifndef NOTIFY_FUNCTION_CALL
#  define NOTIFY_FUNCTION_CALL(a,b,c,d,e,f)
#endif
#ifndef NOTIFY_RETURN_VALUE
#  define NOTIFY_RETURN_VALUE(a)
#endif
#ifndef RETURN
#  define RETURN(a) return(a)
#endif

#ifndef LOG
#  define LOG(...)
#endif

void doxyqml::CQmlObject::addChild(CQmlObject* child)
{
	NOTIFY_FUNCTION_CALL(this, 5, "CQmlObject", "addChild", "CQmlObject* child", "void ")
//[Package_doxyqml/Package_ast/classes/class_CQmlObject/operations/operation_addChild/code.cpp]
	//~~ void addChild(CQmlObject* child) [CQmlObject] ~~
	myChilds.push_back(child);
//[EOF]
}

void doxyqml::CQmlObject::print() const
{
	NOTIFY_FUNCTION_CALL(this, 5, "CQmlObject", "print", "", "void ")
//[Package_doxyqml/Package_ast/classes/class_CQmlObject/operations/operation_print/code.cpp]
	//~~ void print() [CQmlObject] ~~
	for (std::vector<CQmlObject*>::const_iterator it = myChilds.begin(); it != myChilds.end(); it++)
	    (*it)->print();
//[EOF]
}

const std::string doxyqml::CQmlObject::trim(const std::string& s)
{
	NOTIFY_FUNCTION_CALL(this, 5, "CQmlObject", "trim", "const std::string& s", "const std::string ")
//[Package_doxyqml/Package_ast/classes/class_CQmlObject/operations/operation_VFRYOFAL/code.cpp]
	std::string::size_type first = s.find_first_not_of(" \n\t\r");
	if( first == std::string::npos) {
	  return std::string();
	}
	else {
	  std::string::size_type last = s.find_last_not_of(" \n\t\r"); /// must succeed
	  return s.substr( first, last - first + 1);
	}
//[EOF]
}

