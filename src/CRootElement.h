/*
Copyright 2018 Thomas Spitzer <doxyqml@astade.de>
All rights reserved.

This software is a fork of the doxyqml tool written in python, by Aurélien Gâteau
(https://github.com/agateau/doxyqml)

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
*/

/******************************************************************
 * This code was generated by the Astade CppGenerator.            *
 * The generated code is not per se a derivative work of Astade;  *
 * the original copyright to this code is held by the holder(s)   *
 * of the copyright to the underlying model at the time this code *
 * was generated; this code may be distributed under terms of     *
 * his/her/their choice.                                          */
/** the root of the abstract syntax tree
 *  @file CRootElement.h
 ******************************************************************/

#ifndef __CROOTELEMENT_H
#  define __CROOTELEMENT_H

//****** specification prolog ******
//[Package_doxyqml/Package_ast/classes/class_CRootElement/prolog.h]
#include <string>
//[EOF]
//**********************************

// Relation includes:
#include "CQmlObject.h"

// Relation forward declarations:
namespace doxyqml {
class CObjectDeclaration;
} // namespace doxyqml
namespace doxyqml {
class CQmlObject;
} // namespace doxyqml

/** @brief all doxyqml dependend classes
*/
namespace doxyqml {
/** @brief the root of the abstract syntax tree
*/
class CRootElement : public CQmlObject
{

public:
/** @brief set the namespace of the current sub item
@param Namespace the namespace of the item
*/
	void add_namespace(const std::string& Namespace);

/** @brief used to add a child to the object
@param child the new child
*/
	virtual void addChild(CQmlObject* child);

/** @brief used to add a subObjectt to the object
@param child the new child
*/
	void addSubObject(CObjectDeclaration* child);

/** @brief construct from a text
*/
	CRootElement();

/** @brief print the generated code to stdout
@param hasComment info, if there is already comment for that object
*/
	virtual void print(bool hasComment) const;

/** @brief set the id of the curren sub item
@param id the id of the item
*/
	void set_id(const std::string& id);

/** @brief accessor
@param baseClass the new base class
*/
	void setBaseClass(const std::string& baseClass);

/** @brief accessor
@param filename the text of the element
*/
	void setFilename(const std::string& filename);

/** @brief changes the object state
*/
	void setMemberState();

/** @brief accessor
@param Namespace the text of the element
*/
	void setNamespace(const std::string& Namespace);


protected:
/** @brief the last found sub object
*/
	CObjectDeclaration*	lastSubObject;

/** @brief the member childs of the object
*/
	std::vector<CQmlObject*>	myMemberChilds;


private:
/** @brief holds the filename of the root object
*/
	std::string	m_Filename;

/** @brief holds the classname of the root object
*/
	std::string	m_Classname;

/** @brief the name of the base class
*/
	std::string	m_BaseClass;

/** @brief the parsing state:
0: top
1: members
*/
	unsigned int	state;

/** @brief The class namespace
*/
	std::string	m_Namespace;

};
} // namespace doxyqml

#endif
